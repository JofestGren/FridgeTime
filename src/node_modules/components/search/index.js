import React, { Component } from 'react'
import {connect} from 'react-redux'
import * as R from 'ramda'
import classNames from 'classnames'

import {
  fetchRecipes,
  fetchCategories
} from 'actions'

import {getCategories} from 'selectors'

import './index.sass'

class Search extends Component {
  constructor(props) {
    super(props)
    this.state = {
      allowedIngredient: '',
      allowedIngredientError: false,
      excludedIngredient: '',
      excludedIngredientError: false,
      caloriesMin: '',
      caloriesMinError: false,
      caloriesMax: '',
      caloriesMaxError: false,
      maxTotalTime: '',
      maxTotalTimeError: false,
      cuisine: [],
      course: [],
      isCuisinePressed: false,
      isCoursePressed: false,
      isMaxTimePressed: false,
      isSearchPressed: false,
    }

    this.handleAllowedIngredientChange = this.handleAllowedIngredientChange.bind(this)
    this.handleExcludedIngredientChange = this.handleExcludedIngredientChange.bind(this)
    this.handleCaloriesMinChange = this.handleCaloriesMinChange.bind(this)
    this.handleCaloriesMaxChange = this.handleCaloriesMaxChange.bind(this)
    this.handleMaxTotalTimeChange = this.handleMaxTotalTimeChange.bind(this)
    this.handleSearchClick = this.handleSearchClick.bind(this)
    this.handleClearClick = this.handleClearClick.bind(this)
  }

  componentDidMount () {
    this.props.fetchCategories()
  }

  toggleClick (name) {
    switch (name) {
      case 'Cuisine':
        this.setState({
          isCoursePressed: false,
          isMaxTimePressed: false,
          isCuisinePressed: !this.state.isCuisinePressed
        })
        break
      case 'Course':
        this.setState({
          isCuisinePressed: false,
          isMaxTimePressed: false,
          isCoursePressed: !this.state.isCoursePressed
        })
        break
      case 'Max time':
        this.setState({
          isCuisinePressed: false,
          isCoursePressed: false,
          isMaxTimePressed: !this.state.isMaxTimePressed
        })
        break
    
      default:
        break
    }
  }

  handleSearchClick (event) {
    event.preventDefault()
    const reg = /[a-zA-Z\s,]{1,}/

    const checkInput = (value, nameInput) => {
      if (reg.test(value)) {
        this.setState({
          [`${nameInput}Error`]: false,
          [`${nameInput}`]: value
        })
      } else if (value === '') {
        this.setState({
          [`${nameInput}Error`]: false,
          [`${nameInput}`]: value
        })
      } else {
        this.setState({
          [`${nameInput}Error`]: true,
          [`${nameInput}`]: ''
        })
      }
    }

    const checkInputNumber = (value, nameInput) => {
      const isNumeric = (n) => {
        return !isNaN(parseFloat(n)) && isFinite(n);
      }

      if (value === '') {
        this.setState({
          [`${nameInput}Error`]: false,
          [`${nameInput}`]: value
        })
      } else {
        const tempIsNumber = isNumeric(value)

        if (tempIsNumber) {
          this.setState({
            [`${nameInput}Error`]: false,
            [`${nameInput}`]: value
          })
        } else {
          this.setState({
            [`${nameInput}Error`]: true,
            [`${nameInput}`]: ''
          })
        }
      }
    }
    
    checkInput(this.state.allowedIngredient, 'allowedIngredient')
    checkInput(this.state.excludedIngredient, 'excludedIngredient')
    checkInputNumber(this.state.caloriesMax, 'caloriesMax')  
    checkInputNumber(this.state.caloriesMin, 'caloriesMin')
    checkInputNumber(this.state.maxTotalTime, 'maxTotalTime')        

    console.log(this.state)

    // console.log(event.submit)
    if (
      !this.state.allowedIngredientError && 
      !this.state.excludedIngredientError &&
      !this.state.caloriesMaxError &&
      !this.state.caloriesMinError &&
      !this.state.maxTotalTimeError
    ) {
      this.setState({
        isSearchPressed: true
      })

      this.props.fetchRecipes(
        this.state.allowedIngredient, 
        this.state.excludedIngredient, 
        this.state.cuisine, 
        this.state.course, 
        this.state.maxTotalTime, 
        this.state.isSearchPressed, 
        this.state.caloriesMin,
        this.state.caloriesMax
      )
    }
  }

  handleClearClick (event) {
    let uncheck = document.getElementsByTagName('input')
    for(let i = 0; i < uncheck.length; i++) {
      if(uncheck[i].type ==='checkbox' || uncheck[i].type ==='radio') {
        uncheck[i].checked=false;
      }
    }
    this.setState({
      allowedIngredient: '',
      excludedIngredient: '',
      maxTotalTime: '',
    })
  }

  handleCategoryClick (name, value) {
    if (name === 'Cuisine') {
      const isEven = n => n === value
      const cuisine = R.filter(isEven, this.state.cuisine)
      if (cuisine.length === 0) {
        this.setState({
          cuisine: [...this.state.cuisine, value]
        })
      } else {
        const cuisine = R.without(value, this.state.cuisine)
        this.setState({
          cuisine: cuisine
        })
      }
    } else {
      const isEven = n => n === value
      const course = R.filter(isEven, this.state.course)
      if (course.length === 0) {
        this.setState({
          course: [...this.state.course, value]
        })
      } else {
        const course = R.without(value, this.state.course)
        this.setState({
          course: course
        })
      }
    }
  }

  handleMaxTotalTimeClick (value) {
    this.setState({
      maxTotalTime: value
    })
  }

  handleAllowedIngredientChange (event) {
    this.setState({
      // allowedIngredientError: false,
      allowedIngredient: event.target.value
    })
    // const reg = /[a-zA-Z\s,]{1,}/
    // if (reg.test(event.target.value)) {
    //   this.setState({
    //     allowedIngredientError: false,
    //     allowedIngredient: event.target.value
    //   })
    // } else {
    //   this.setState({
    //     allowedIngredientError: true
    //   })
    // }
  }

  handleExcludedIngredientChange (event) {
    this.setState({
      excludedIngredient: event.target.value
    })
  }

  handleCaloriesMinChange (event) {
    console.log(event)
    this.setState({
      caloriesMin: event.target.value
    })
  }

  handleCaloriesMaxChange (event) {
    this.setState({
      caloriesMax: event.target.value
    })
  }

  handleMaxTotalTimeChange (event) {
    this.setState({
      maxTotalTime: event.target.value
    })
  }

  renderSearchByIngredients () {
    return (
      <div className='search-ingredients'>
        <div className='search-title'>
          <h3>Search by ingredients</h3>
        </div>
        <div className='search-ingredients__list'>
          <div className='search-ingredients__block'>
            {
              R.not(!this.state.allowedIngredientError) &&
              <span className='search-ingredients__error'>Enter the correct ingredients!</span>
            }
            <input
              onChange={this.handleAllowedIngredientChange}
              type='text'
              value={this.state.allowedIngredient}
              className='search-ingredients__input'
              placeholder='eggs, tomato paste'
              // pattern='[a-zA-Z\s,]{1,}'
            />
            <span className='tooltip-text'>Allowed ingredients</span>
          </div>
          <div className='search-ingredients__block search-ingredients__block--excluded'>
            {
              R.not(!this.state.excludedIngredientError) &&
              <span className='search-ingredients__error'>Enter the correct ingredients!</span>
            }
            <input
              onChange={this.handleExcludedIngredientChange}
              value={this.state.excludedIngredient}              
              type='text'
              className='search-ingredients__input'
              placeholder='eggs, tomato paste'
              // pattern='[a-zA-Z\s,]{1,}'
            />
            <span className='tooltip-text'>Excluded ingredients</span>
          </div>
        </div>
      </div>
    )
  }

  renderSearchByCalories () {
    return (
      <div>
        <div className='search-title'>
          <h3>Search by calories</h3>
        </div>
        <div className='search-ingredients__list'>
          {
            R.not(!this.state.caloriesMinError && !this.state.caloriesMaxError) &&
            <span className='search-ingredients__error'>Enter the correct calories!</span>
          }
          <div className='search-ingredients__list--calories'>
            <div className='search-ingredients__block search-ingredients__block--calories'>
              <input
                type='text'
                className='search-ingredients__input search-ingredients__input--calories'
                placeholder='200'
                value={this.state.caloriesMin}
                onChange={this.handleCaloriesMinChange}
              />
              <span className='input-maxTime__desc input-maxTime__desc--calories'>min</span>
              <span className='tooltip-text tooltip-text--calories'>Calories min</span>
            </div>
            <div className='search-ingredients__block search-ingredients__block--calories'>
              <input              
                type='text'
                className='search-ingredients__input search-ingredients__input--calories'
                placeholder='200'
                value={this.state.caloriesMax}
                onChange={this.handleCaloriesMaxChange}
              />
              <span className='input-maxTime__desc input-maxTime__desc--calories'>max</span>
              <span className='tooltip-text tooltip-text--calories'>Calories max</span>
            </div>
          </div>
        </div>
      </div>
    )
  }

  renderCuisineCourse (category, dropdown) {
    return (
      <div className={dropdown}>
        {
          category.key.map((value, index) => (
            <div className='search-categories__buttons' key={index}>
              <label className='search-categories__label'>
                <span className='checkbox-text'>{value}</span>
                <input 
                  type='checkbox' 
                  onClick={() => this.handleCategoryClick(category.name, value)} 
                />
                <span className='checkmark'></span>
              </label>
            </div>
          ))
        }
      </div>
    )
  }

  renderMaxTime (category, dropdown) {
    return (
      <div className={dropdown}>
        <div className='search-ingredients__block search-ingredients__block--time'>
          {
            R.not(!this.state.maxTotalTimeError) &&
            <span className='search-ingredients__error'>Enter the correct time!</span>
          }
          <div className='search-ingredients__item--time'>
            <input
              value={this.state.maxTotalTime}
              onChange={this.handleMaxTotalTimeChange}
              type='text'
              className='search-ingredients__input search-ingredients__input--maxTime'
              placeholder='10'
            />
            <span className='input-maxTime__desc'>min</span>
            <span className='tooltip-text tooltip-text--maxTime'>Max time cooking</span>
          </div>
        </div>
        {
          category.key.map((value, index) => {
            const minutes = value
            let time = 0
            if (minutes > 59 && minutes%60 !== 0) {
              time = `${Math.floor(minutes/60)} hr ${minutes%60} min`
            } else if (minutes > 59 && minutes%60 === 0) {
              time = `${Math.floor(minutes/60)} hr`
            } else {
              time = `${minutes} min`
            }
            return (
              <div className='search-categories__buttons' key={index}>
                <label className='search-categories__label'>
                <span>{time}</span>
                  <input 
                    type='radio'
                    name="radio"
                    onClick={() => this.handleMaxTotalTimeClick(value)} 
                  />
                  <span className='checkmark-radio'></span>
                </label>
              </div>
            )
          })
        }
      </div>
    )
  }

  renderCategories (category, index) {
    const dropdownClass = (isPressed) => classNames('search-accordion__item--none', this.props.className, {
      'search-accordion__item': isPressed,
    })

    const titleClass = (isPressed) => classNames('search-accordion__title', this.props.className, {
      'search-accordion__title--up': isPressed,
    })

    let dropdown, title
    switch (category.name) {
      case 'Cuisine':
        dropdown = dropdownClass(this.state.isCuisinePressed)
        title = titleClass(this.state.isCuisinePressed)
        break
      case 'Course':
        dropdown = dropdownClass(this.state.isCoursePressed)
        title = titleClass(this.state.isCoursePressed)
        break
      case 'Max time':
        dropdown = dropdownClass(this.state.isMaxTimePressed)
        title = titleClass(this.state.isMaxTimePressed)
        break
    
      default:
        break
    }
    return (
      <div className='search-categories' key={index}>
        <div>
          <div 
            onClick={() => this.toggleClick(category.name)}
            className={title}
          >
            <h3>{category.name}</h3>
          </div>
          <div>
            {
              category.name === 'Max time' ?
              this.renderMaxTime(category, dropdown) :
              this.renderCuisineCourse(category, dropdown)
            }
          </div>
        </div>
      </div>
    )
  }

  render () {
    const {categories} = this.props
    let clearBtn
    if (this.state.isSearchPressed) {
      clearBtn = <button 
        className='search-btn search-btn--clear'
        onClick={() => this.handleClearClick()}
      >
        Clear filters
      </button>
    }
    return (
      <form 
        className='search' 
        onSubmit={this.handleSearchClick}
      >
        <div>
          {this.renderSearchByIngredients()}
        </div>
        <div>
          {this.renderSearchByCalories()}
        </div>
        <div className='search-acordion'>
          {categories.map((category, index) => this.renderCategories(category, index))}
        </div>
        <div className='search-button__block'>
          <button 
            className='search-btn'
            // onClick={() => this.handleSearchClick()}
          >
            Search
          </button>
          {clearBtn}
        </div>
      </form>
    )
  }
}

const mapStateToProps = state => ({
  categories: getCategories(state)
})

const mapDispatchToProps = {
  fetchRecipes,
  fetchCategories
}

export default connect(mapStateToProps, mapDispatchToProps)(Search)