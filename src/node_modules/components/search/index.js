import React, { Component } from 'react'
import {connect} from 'react-redux'
import * as R from 'ramda'

import {
  fetchRecipes,
  fetchCategories
} from 'actions'

import {getCategories} from 'selectors'

import './index.sass'

import {
  Accordion,
  AccordionItem,
  AccordionItemTitle,
  AccordionItemBody,
} from 'react-accessible-accordion'

import 'react-accessible-accordion/dist/fancy-example.css'

class Search extends Component {
  constructor(props) {
    super(props)
    this.state = {
      allowedIngredient: '',
      excludedIngredient: '',
      maxTotalTime: '',
      cuisine: [],
      course: []
    }

    this.handleAllowedIngredientChange = this.handleAllowedIngredientChange.bind(this)
    this.handleExcludedIngredientChange = this.handleExcludedIngredientChange.bind(this)
    this.handleMaxTotalTimeChange = this.handleMaxTotalTimeChange.bind(this)
    this.handleSearchClick = this.handleSearchClick.bind(this)    
  }

  componentDidMount () {
    this.props.fetchCategories()
  }

  handleSearchClick (event) {
    this.props.fetchRecipes(this.state.allowedIngredient, this.state.excludedIngredient, 
      this.state.cuisine, this.state.course, this.state.maxTotalTime)
  }

  handleCategoryClick (name, value) {
    if (name === 'Cuisine') {
      const isEven = n => n === value
      const cuisine = R.filter(isEven, this.state.cuisine)
      if (cuisine.length === 0) {
        this.setState({
          cuisine: [...this.state.cuisine, value]
        })
      } else {
        const cuisine = R.without(value, this.state.cuisine)
        this.setState({
          cuisine: cuisine
        })
      }
    } else {
      const isEven = n => n === value
      const course = R.filter(isEven, this.state.course)
      if (course.length === 0) {
        this.setState({
          course: [...this.state.course, value]
        })
      } else {
        const course = R.without(value, this.state.course)
        this.setState({
          course: course
        })
      }
    }
  }

  handleMaxTotalTimeClick (value) {
    this.setState({
      maxTotalTime: value
    })
  }

  handleAllowedIngredientChange (event) {
    this.setState({
      allowedIngredient: event.target.value
    })
  }

  handleExcludedIngredientChange (event) {
    this.setState({
      excludedIngredient: event.target.value
    })
  }

  handleMaxTotalTimeChange (event) {
    this.setState({
      maxTotalTime: event.target.value
    })
  }

  renderSearchByIngredients () {
    return (
      <div>
        <div className='search-title'>
          <h3>Search by ingredients</h3>
        </div>
        <div>
          <div className='search-ingredients__block'>
            <input
              onChange={this.handleAllowedIngredientChange}
              type='text'
              className='search-ingredients__input'
              placeholder='eggs, tomato paste'
            />
            <span className='tooltip-text'>Allowed ingredients</span>
          </div>
          <div className='search-ingredients__block search-ingredients__block--excluded'>
            <input
              onChange={this.handleExcludedIngredientChange}
              type='text'
              className='search-ingredients__input'
              placeholder='eggs, tomato paste'
            />
            <span className='tooltip-text'>Excluded ingredients</span>
          </div>
        </div>
      </div>
    )
  }

  renderCategoriesList (value, index, name) {
    return (
      <div className='search-categories__buttons' key={index}>
        <label className='search-categories__label'>
          <span className='checkbox-text'>{value}</span>
          <input type='checkbox' onClick={() => this.handleCategoryClick(name, value)} />
          <span className='checkmark'></span>
        </label>
      </div>
    )
  }

  renderCategories (category, index) {
    return (
      <div className='search-categories' key={index}>
        <Accordion className='search-accordion'>
          <AccordionItem className='search-accordion__item'>
            <AccordionItemTitle className='search-accordion__title'>
              <h3>{category.name}</h3>
            </AccordionItemTitle>
            <AccordionItemBody>
              {category.key.map((value, index) => this.renderCategoriesList(value, index, category.name))}
            </AccordionItemBody>
          </AccordionItem>
        </Accordion>
      </div>
    )
  }

  renderMaxTime () {
    return (
      <div className='search-categories'>
        <Accordion className='search-accordion'>
          <AccordionItem>
            <AccordionItemTitle className='search-accordion__title'>
              <h3>Max time</h3>
            </AccordionItemTitle>
            <AccordionItemBody>
              <div className='search-ingredients__block search-ingredients__block--time'>
                <input
                  onChange={this.handleMaxTotalTimeChange}
                  type='number'
                  className='search-ingredients__input'
                  placeholder='10'
                />
                <span className='tooltip-text tooltip-text--maxTime'>Max time cooking</span>
              </div>
              <div>
                <label className='search-categories__label'>
                  <span>30 minutes</span>
                  <input 
                    type='radio'
                    name="radio"
                    onClick={() => this.handleMaxTotalTimeClick('30')} 
                  />
                  <span className='checkmark-radio'></span>
                </label>
              </div>
              <div>
                <label className='search-categories__label'>
                  <span>1 hour</span>
                  <input 
                    type='radio'
                    name="radio"
                    onClick={() => this.handleMaxTotalTimeClick('60')}
                  />
                  <span className='checkmark-radio'></span>
                </label>
              </div>
              <div>
                <label className='search-categories__label'>
                  <span>1 hour 30 minutes</span>
                  <input 
                    type='radio'
                    name="radio"
                    onClick={() => this.handleMaxTotalTimeClick('90')} 
                  />
                  <span className='checkmark-radio'></span>
                </label>
              </div>
              <div>
                <label className='search-categories__label'>
                  <span>2 hour</span>
                  <input 
                    type='radio' 
                    name="radio"
                    onClick={() => this.handleMaxTotalTimeClick('120')} 
                  />
                  <span className='checkmark-radio'></span>
                </label>
              </div>
              <div>
                <label className='search-categories__label'>
                  <span>3 hour</span>
                  <input 
                    type='radio'
                    name="radio" 
                    onClick={() => this.handleMaxTotalTimeClick('180')} 
                  />
                  <span className='checkmark-radio'></span>
                </label>
              </div>
            </AccordionItemBody>
          </AccordionItem>
        </Accordion>
      </div>
    )
  }

  render () {
    const {categories} = this.props
    return (
      <div className='search'>
        <div>
          {this.renderSearchByIngredients()}
        </div>
        <div>
          {categories.map((category, index) => this.renderCategories(category, index))}
        </div>
        <div>
          {this.renderMaxTime()}
        </div>
        <div className='search-button__block'>
          <button 
            className='search-btn'
            onClick={() => this.handleSearchClick()}
          >
            Search
          </button>
        </div>
      </div>
    )
  }
}

const mapStateToProps = state => ({
  categories: getCategories(state)
})

const mapDispatchToProps = {
  fetchRecipes,
  fetchCategories
}

export default connect(mapStateToProps, mapDispatchToProps)(Search)