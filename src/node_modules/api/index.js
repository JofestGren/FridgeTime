import request from 'superagent'

import categories from './mockCategories'

const appId = 'c28d3573';
const appKey = '411ca5342798527424d0aac10b9d542f'

let inredientsToMore = ``

const filterIngredient = (ingredient, parameters) => {
  let ingredientList = ``
  if (ingredient !== '') {
    const arrIngredients = ingredient.split(',')
    for (let i = 0; i < arrIngredients.length; i++) {
      let temp = arrIngredients[i].trim().replace(/ /ig, '+')
      ingredientList += `&${parameters}[]=${temp}` 
    }

    return ingredientList
  } else {
    return ingredientList
  }
}

const filterCategories = (value, parameters, categories) => {
  let categoriesList = ``
  if (value.length !== 0) {
    if (categories === 'cuisine') {
      for (let i = 0; i < value.length; i++) {
        categoriesList += `&${parameters}[]=${categories}^${categories}-${value[i].toLowerCase()}`
      } 
      return categoriesList
    } else {
      for (let i = 0; i < value.length; i++) {
        categoriesList += `&${parameters}[]=${categories}^${categories}-${value[i]}`
      }  
      return categoriesList
    }
  } else {
    return categoriesList
  }
}

const filterMaxTotalTime = (maxTotalTime) => {
  let maxTotalTimeList = ``
  if (maxTotalTime !== '') {
    maxTotalTime *= 60
    maxTotalTimeList = `&maxTotalTimeInSeconds=${maxTotalTime}`
    return maxTotalTimeList
  } else {
    return maxTotalTimeList
  }
}

const filterCalories = (caloriesMin, caloriesMax) => {
  let caloriesList = ``
  if (caloriesMin !== '') {
    caloriesList = `&nutrition.ENERC_KCAL.min=${caloriesMin}`
  }
  if (caloriesMax !== '') {
    caloriesList += `&nutrition.ENERC_KCAL.max=${caloriesMax}`
  }
  return caloriesList
}

const filterSearchById = (recipesArray) => {
  const recipe = recipesArray.ingredientLines

  for (let j = 1; j < recipe.length; j++) {
    if (recipe[j] === recipe[j-1]) {
      recipe.splice(j, 1)
      j--
    }
  }
  return recipesArray
}

export const fetchCategories = async () => {
  return new Promise((resolve, reject) => {
    resolve(categories)
  })
}
// [a-zA-Z\s,]{1,}
export const fetchRecipes = async (
  allowedIngredient, 
  excludedIngredient, 
  cuisine, 
  course, 
  maxTotalTime,
  caloriesMin,
  caloriesMax
  ) => {

  const allowedIngredientList = filterIngredient(allowedIngredient, 'allowedIngredient')
  const excludedIngredientList = filterIngredient(excludedIngredient, 'excludedIngredient')
  const cuisineList = filterCategories(cuisine, 'allowedCuisine', 'cuisine')
  const courseList = filterCategories(course, 'allowedCourse', 'course')
  const maxTotalTimeList = filterMaxTotalTime(maxTotalTime)
  const caloriesList  = filterCalories(caloriesMin, caloriesMax)

  // console.log('caloriesList', caloriesList)

  const {body} = await request.get(
    `http://api.yummly.com/v1/api/recipes?_app_id=${appId}&_app_key=${appKey}${allowedIngredientList}${excludedIngredientList}${cuisineList}${courseList}${maxTotalTimeList}${caloriesList}&requirePictures=true`
  )

  if (body.matches.length !== 0)
    inredientsToMore = `${allowedIngredientList}${excludedIngredientList}${cuisineList}${courseList}${maxTotalTimeList}${caloriesList}`

  return body.matches
}

export const loadMoreRecipes = async ({offset}) => {
  const {body} = await request.get(
    `http://api.yummly.com/v1/api/recipes?_app_id=${appId}&_app_key=${appKey}${inredientsToMore}&requirePictures=true&maxResult=${offset}&start=${offset}`
  )

  return body.matches
}

export const fetchRecipeById = async id => {
  const {body} = await request.get(
    `http://api.yummly.com/v1/api/recipe/${id}?_app_id=${appId}&_app_key=${appKey}&requirePictures=true`
  )
  
  const filterRecipe = filterSearchById(body)

  return filterRecipe
}