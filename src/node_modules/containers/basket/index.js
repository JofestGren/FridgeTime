import React, {Component} from 'react'
import {connect} from 'react-redux'
import * as R from 'ramda'
import {Link} from 'react-router'
import ClipboardJS from 'clipboard'
import classNames from 'classnames'

import {
  getBasketRecipes,
  getTotalBasketTime,
  getAllIngredientsList,
  getSortIngredientsList
} from 'selectors'

import {
  removeRecipeFromBasket,
  cleanBasket
} from 'actions'

import Header from 'components/header'
import Footer from 'components/footer'

import './index.sass'

class Basket extends Component {
  constructor (props) {
    super(props)
    this.state = {
      isListPressed: false,
      isRecipePressed: true,
    }
  }

  toggleIngredientsListClick (name) {
    if (name === 'list') {
      this.setState({
        isRecipePressed: false,
        isListPressed: true
      })
    } else if (name === 'recipe') {
      this.setState({
        isListPressed: false,
        isRecipePressed: true
      })
    }
  }

  renderIngredientList (recipe, index) {
    return (
      <div className='ingredients-list__item' key={index}>
        {recipe.ingredientLines.map((value, key) => (
          <div className='ingredients-list__text' key={key}>
            <div>
              {value}
            </div>
          </div>
        ))}
      </div>
    )
  }

  renderBasket () {
    const {recipes, totalTime, allIngredientsList, sortIngredientsList, removeRecipeFromBasket} = this.props

    const recipeBtn = classNames('basket-ingredients-list__btn basket-ingredients-list__btn--recipe', this.props.className, {
      'basket-ingredients-list__btn--active basket-ingredients-list__btn--active--recipe': this.state.isRecipePressed,
    })

    const listBtn = classNames('basket-ingredients-list__btn basket-ingredients-list__btn--list', this.props.className, {
      'basket-ingredients-list__btn--active basket-ingredients-list__btn--active--list': this.state.isListPressed,
    })

    const recipeDropdown = classNames('basket-ingredients-list-content', this.props.className, {
      'basket-ingredients-list-content--active': this.state.isRecipePressed,
    })

    const listDropdown = classNames('basket-ingredients-list-content', this.props.className, {
      'basket-ingredients-list-content--active': this.state.isListPressed,
    })

    let linesItem = ``

    sortIngredientsList.forEach(element => {
      linesItem += `${element} \n`
    })

    new ClipboardJS('.basket-clipboardBtn', {
      text: (trigger) =>  {
        if (this.state.isRecipePressed) {
          return allIngredientsList
        } else if (this.state.isListPressed) {
          return linesItem
        }        
      }
    })

    return (
      <div className='basket'>
        <div className='basket-list'>
          <div className='basket-info__title'>
            <h4>Chosen list</h4>
          </div>
          <div className='basket-info'>
            <div>
              <div className='basket-info__block'>
                {recipes.map((recipe, index) => (
                  <div 
                    className='basket-body'
                    key={index}
                  >
                    <div>
                      <img
                        src={recipe.images[0].hostedSmallUrl}
                        alt={recipe.name}
                        className='basket-image'
                      />
                    </div>
                    <div>
                      <Link 
                        to={`/recipes/${recipe.id}`}
                        className='basket-name__link'
                      >
                        {recipe.name}
                      </Link>
                    </div>
                    {/* <div>
                      <span>  {recipe.totalTime}</span>
                    </div> */}
                    <div className='basket-delete-block'>
                      <span className='basket-time'>{recipe.totalTime}</span>
                      <span
                        className='basket-delete'
                        onClick={() => removeRecipeFromBasket(recipe.id)}
                      />         
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div className='basket-total-time'>
            <div className='basket-total-time__name'>
              <span>Total time:</span>
            </div>
            <div>
              <span>{totalTime}</span>
            </div>
          </div>
        </div>
        <div className='basket-ingredients-list'>
          <div className='basket-info__title'>
            <h4>All ingredients</h4>
          </div>
          <div className='basket-ingredients-list__buttons'>
            <button 
              className={recipeBtn}
              onClick={() => this.toggleIngredientsListClick('recipe')}
            >
              Recipe sorting
            </button>
            <button
              className={listBtn}
              onClick={() => this.toggleIngredientsListClick('list')}
            >
              Common list
            </button>
          </div>
          <div className={recipeDropdown}>
            {
              recipes.map((recipe, index) => this.renderIngredientList(recipe, index))
            }
          </div>
          <div className={listDropdown}>
            {
              sortIngredientsList.map((value, index) => (
                <div className='ingredients-list__text' key={index}>
                  <div>
                    {value}
                  </div>
                </div>
              ))
            }
          </div>
          <div>
            <button className='basket-clipboardBtn'>
              Copy ingredients list
            </button>
          </div>
        </div>
      </div>
    )
  }

  renderSidebarOption () {
    const {cleanBasket} = this.props
    return (
      <div className='basket-sidebar__buttons'>
        <button
          onClick={cleanBasket}
          className='basket-sidebar__btn basket-sidebar__btn--clearList'
        >
          Clear list
        </button>
      </div>
    )
  }

  renderSidebar () {
    const {recipes} = this.props
    const isBasketEmpty = R.isEmpty(recipes)
    return (
      <div className='basket-sidebar'>
        {
          isBasketEmpty &&
          <div className='basket-sidebar-link basket-sidebar-link--empty'>
            <Link 
              className='basket-sidebar__btn basket-sidebar__btn--title basket-sidebar__btn--backToHome'
              to='/'
            >
              <span>Back to home</span>
            </Link>
          </div>
        }
        {
          R.not(isBasketEmpty) &&
          <div className='basket-sidebar-link'>
            <Link 
              className='basket-sidebar__btn basket-sidebar__btn--title basket-sidebar__btn--backToHome'
              to='/'
            >
              <span>Back to home</span>
            </Link>
          </div>
        }
        {R.not(isBasketEmpty) && this.renderSidebarOption()}
      </div>
    )
  }

  renderBanner () {
    return (
      <div className='basket-banner__desc'>
        <span>Your chosen list is empty</span>
      </div>
    )
  }

  render () {
    const {recipes} = this.props
    return (
      <div>
        <Header />
        <div className='basket-container'>
          <div className='basket-row'>
            <div className='basket-content'>
              {
                recipes.length !== 0 && recipes ?
                this.renderBasket() :
                this.renderBanner()
              }
            </div>
            <div className='basket-nav'>
              {recipes && this.renderSidebar()}
            </div>
          </div>
        </div>
        <Footer />
      </div>
    )
  }
}

const mapStateToProps = state => {
  return {
    recipes: getBasketRecipes(state),
    totalTime: getTotalBasketTime(state),
    allIngredientsList: getAllIngredientsList(state),
    sortIngredientsList: getSortIngredientsList(state)
  }
}

const mapDispatchToProps = {
  removeRecipeFromBasket,
  cleanBasket
}

export default connect(mapStateToProps, mapDispatchToProps)(Basket)