import {
  FETCH_CATEGORIES_START,
  FETCH_CATEGORIES_SUCCESS,
  FETCH_CATEGORIES_FAILURE,

  FETCH_RECIPES_START,
  FETCH_RECIPES_SUCCESS,
  FETCH_RECIPES_FAILURE,

  LOAD_MORE_RECIPES_START,
  LOAD_MORE_RECIPES_SUCCESS,
  LOAD_MORE_RECIPES_FAILURE,

  FETCH_RECIPE_BY_ID_START,
  FETCH_RECIPE_BY_ID_SUCCESS,
  FETCH_RECIPE_BY_ID_FAILURE,

  ADD_RECIPE_TO_BASKET_START,
  ADD_RECIPE_TO_BASKET_SUCCESS,
  ADD_RECIPE_TO_BASKET_FAILURE,

  REMOVE_RECIPE_FROM_BASKET,

  CLEAN_BASKET
} from 'actionTypes'

import {
  fetchCategories as fetchCategoriesApi,
  fetchRecipes as fetchRecipesApi,
  fetchRecipeById as fetchRecipeByIdApi,
  loadMoreRecipes as loadMoreRecipesApi
} from 'api'

import { getRenderRecipesLength } from 'selectors'

export const fetchCategories = () => async dispatch => {
  dispatch({type: FETCH_CATEGORIES_START})

  try {
    const phones = await fetchCategoriesApi()
    dispatch({
      type: FETCH_CATEGORIES_SUCCESS,
      payload: phones
    })
  } catch (err) {
    dispatch({
      type: FETCH_CATEGORIES_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const fetchRecipes = (
  allowedIngredient, 
  excludedIngredient, 
  cuisine, 
  course,
  maxTotalTime
  ) => async dispatch => {
  dispatch({ type: FETCH_RECIPES_START })  
  try {
    const recipes = await fetchRecipesApi(allowedIngredient, excludedIngredient, cuisine, course, maxTotalTime)
    dispatch({ 
      type: FETCH_RECIPES_SUCCESS,
      payload: recipes
    })
  } catch (err) {
    dispatch({
      type: FETCH_RECIPES_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const loadMoreRecipes = () => async (dispatch, getState) => {
    const offset = getRenderRecipesLength(getState())

    console.log(offset)

    dispatch({type: LOAD_MORE_RECIPES_START})
  
    try {
      const recipes = await loadMoreRecipesApi({offset})
      dispatch({
        type: LOAD_MORE_RECIPES_SUCCESS,
        payload: recipes
      })
    } catch (err) {
      dispatch({
        type: LOAD_MORE_RECIPES_FAILURE,
        payload: err,
        error: true
      })
    }
  }

export const fetchRecipeById = id => async dispatch => {
  dispatch({ type: FETCH_RECIPE_BY_ID_START })

  try {
    const recipe = await fetchRecipeByIdApi(id)
    dispatch({
      type: FETCH_RECIPE_BY_ID_SUCCESS,
      payload: recipe
    })
  } catch (err) {
    dispatch({
      type: FETCH_RECIPE_BY_ID_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const addRecipeToBasket = id => async dispatch => {
  dispatch({ 
    type: ADD_RECIPE_TO_BASKET_START,
    payload: id
  })

  try {
    const recipe = await fetchRecipeByIdApi(id)
    dispatch({
      type: ADD_RECIPE_TO_BASKET_SUCCESS,
      payload: recipe
    })
  } catch (err) {
    dispatch({
      type: ADD_RECIPE_TO_BASKET_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const removeRecipeFromBasket = id => async dispatch => {
  dispatch({
    type: REMOVE_RECIPE_FROM_BASKET,
    payload: id
  })
}

export const cleanBasket = () => dispatch => {
  dispatch({
    type: CLEAN_BASKET
  })
}