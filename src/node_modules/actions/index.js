import {
  FETCH_RECIPES_START,
  FETCH_RECIPES_SUCCESS,
  FETCH_RECIPES_FAILURE,

  LOAD_MORE_RECIPES_START,
  LOAD_MORE_RECIPES_SUCCESS,
  LOAD_MORE_RECIPES_FAILURE,

  FETCH_RECIPE_BY_ID_START,
  FETCH_RECIPE_BY_ID_SUCCESS,
  FETCH_RECIPE_BY_ID_FAILURE,

  ADD_RECIPE_TO_BASKET,

  SEARCH_RECIPES,

  REMOVE_RECIPE_FROM_BASKET,

  CLEAN_BASKET,

  BASKET_CHECKOUT_START,
  BASKET_CHECKOUT_SUCCESS,
  BASKET_CHECKOUT_FAILURE
} from 'actionTypes'

import {
  fetchRecipes as fetchRecipesApi,
  fetchRecipeById as fetchRecipeByIdApi,
  loadMoreRecipes as loadMoreRecipesApi,
  basketCheckout as basketCheckoutApi
} from 'api'

import { getRenderRecipesLength } from 'selectors';

export const fetchRecipes = (text) => async dispatch => {
  dispatch({ type: FETCH_RECIPES_START })

  try {
    const recipes = await fetchRecipesApi(text)
    dispatch({ 
      type: FETCH_RECIPES_SUCCESS,
      payload: recipes
    })
  } catch (err) {
    dispatch({
      type: FETCH_RECIPES_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const loadMoreRecipes = () => async (dispatch, getState) => {
    const offset = getRenderRecipesLength(getState())

    console.log(offset)

    dispatch({type: LOAD_MORE_RECIPES_START})
  
    try {
      const recipes = await loadMoreRecipesApi({offset})
      dispatch({
        type: LOAD_MORE_RECIPES_SUCCESS,
        payload: recipes
      })
    } catch (err) {
      dispatch({
        type: LOAD_MORE_RECIPES_FAILURE,
        payload: err,
        error: true
      })
    }
  }

export const fetchRecipeById = id => async dispatch => {
    dispatch({ type: FETCH_RECIPE_BY_ID_START })

  try {
    const recipe = await fetchRecipeByIdApi(id)
    dispatch({
      type: FETCH_RECIPE_BY_ID_SUCCESS,
      payload: recipe
    })
  } catch (err) {
    dispatch({
      type: FETCH_RECIPE_BY_ID_FAILURE,
      payload: err,
      error: true
    })
  }
}

export const addRecipeToBasket = id => dispatch => {
  dispatch({
    type: ADD_RECIPE_TO_BASKET,
    payload: id
  })
}

export const searchRecipe = text => dispatch => {
  dispatch({
    type: SEARCH_RECIPES,
    payload: text
  })
}

export const removeRecipeFromBasket = id => async dispatch => {
  dispatch({
    type: REMOVE_RECIPE_FROM_BASKET,
    payload: id
  })
}

export const cleanBasket = () => dispatch => {
  dispatch({
    type: CLEAN_BASKET
  })
}

// export const basketCheckout = recipes => () => {
//   alert(JSON.stringify(recipes))
// }

export const basketCheckout = id => async dispatch => {
  dispatch({ type: BASKET_CHECKOUT_START })

try {
  const recipe = await basketCheckoutApi(id)
  dispatch({
    type: BASKET_CHECKOUT_SUCCESS,
    payload: recipe
  })
} catch (err) {
  dispatch({
    type: BASKET_CHECKOUT_FAILURE,
    payload: err,
    error: true
  })
}
}
