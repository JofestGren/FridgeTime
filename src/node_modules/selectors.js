import * as R from 'ramda'

export const getRecipeById = (state, id) => R.prop(id, state.recipes)

export const getRecipe = (state, id) => R.prop(id, state.recipe)

export const getRecipes = state => {
  const applySearch = item => R.contains(
    state.recipesPage.search,
    R.prop('recipeName', item)
  )

  const recipes = R.compose(
    R.filter(applySearch),
    R.map(id => getRecipeById(state, id)) 
  )(state.recipesPage.ids)
  return recipes
}

export const getRenderRecipesLength = state => R.length(state.recipesPage.ids)

export const getTotalBasketCount = state => R.length(state.basket)

export const getTotalBasketTime = state => {
  const totalTime = R.compose(
    R.sum,
    R.pluck('totalTimeInSeconds'),
    R.map(id => getRecipeById(state, id))
  )(state.basket)

  return totalTime/60
}

export const getBasketRecipesWhithCount = state => {
  const recipeCount = id => R.compose(
    R.length,
    R.filter(basketId => R.equals(id, basketId))
  )(state.basket)
  const recipeWithCount = recipe => R.assoc('count', recipeCount(recipe.id), recipe)

  const uniqueIds = R.uniq(state.basket)
  const recipes = R.compose(
    R.map(recipeWithCount),
    R.map(id => getRecipeById(state, id))
  )(uniqueIds)

  return recipes
}

export const getBasketRecipesId = state => {
  const recipesId = state.basket

  return recipesId
}

export const getBasketCheckoutById = (state, id) => {
  return R.prop(id, state.basketCheckout)
}

export const getBasketCheckout = state => {
  if(state.basketCheckout.length !== 0) {
    const recipes = R.compose(
      R.map(id => getBasketCheckoutById(state, id)) 
    )(state.basket)
    // console.log(recipes)
    return recipes
  } else {
    return []
  }
}